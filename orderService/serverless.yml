# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: thuongtt97
# "service" is the name of this project. This will also be added to your AWS resource names.
service: orderService

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-southeast-1
  environment:
    DYNAMO_TABLE: Orders
    SQS_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/021891614965/OrderQueue
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
      Resource:  
        - arn:aws:dynamodb:ap-southeast-1:021891614965:table/Orders # Instead of using Fn::GetAtt, you can directly specify the ARN :Fn::GetAtt: [OrdersTable, Arn] 
        - arn:aws:sqs:ap-southeast-1:021891614965:OrderQueue # Fn::GetAtt: [OrderQueue, Arn] 
  httpApi:
    authorizers:
      myCognitoAuth: #Custom name for Cognito Authorization(used in routes)
        identitySource: $request.header.Authorization #Extract JWT token from Authorization
        #header (used for validation)
        issuerUrl: https://cognito-idp.ap-southeast-1.amazonaws.com/ap-southeast-1_Kx65YKYXy
        #Url of your Cognito user pool(Needed to  verify tokens).
        audience:
          - 19pg1k8ns62j50bvnjn8blfcqf
          #Cognito App client ID(ensures tokens come from the right app).

resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    OrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrderQueue     

functions:
  placeOrder:
    handler: handlers/placeOrder.placeOrder
    events:
      - httpApi:
          path: /create-order
          method: post
          authorizer:
            name: myCognitoAuth
  processOrder:
    handler: handlers/processOrder.processOrder
    events:
      - sqs:
          arn:
            Fn::GetAtt: [OrderQueue, Arn] # arn:aws:sqs:ap-southeast-1:021891614965:OrderQueue

  updateOrderStatus:
    handler: handlers/updateOrderStatus.handler


stepFunctions: #Start defining Step Functions
  stateMachines: #Define list of state machines
    OrderProcessingStateMachine: #this is the name of your state  machine
      name: OrderProcessingStateMachine  #AWS name for the Step Function
      definition: #The actual structure (state transitions) of the step function
        Comment: "Order processing with status update" #Just a comment to describe what this state machine does
        StartAt: UpdateStatusToProcessing
        States: 
          UpdateStatusToProcessing:
            Type: Task
            Resource:
              Fn::GetAtt: [updateOrderStatus, Arn] #Invoke the Lambda function to update order status to "Processing"
            Next: NotifyUser
          NotifyUser:
            Type: Pass #This is dummy/pass-through step  (does noting, usefull)  
            Result: "User Notified"
            End: true #End of the state machine execution